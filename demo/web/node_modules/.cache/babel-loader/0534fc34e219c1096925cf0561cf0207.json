{"ast":null,"code":"import _slicedToArray from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{webSocketContext}from'./WebSocket';import React,{useContext,useEffect,useState}from'react';import{WebSocketService}from'../../services/web-socket';import{configContext,sessionContext}from'@instinct-web/core';export function WebSocketContextProvider(_ref){var children=_ref.children;var _useContext=useContext(sessionContext),sso=_useContext.sso;var _useContext2=useContext(configContext),config=_useContext2.config;var _useState=useState(),_useState2=_slicedToArray(_useState,2),connection=_useState2[0],setConnection=_useState2[1];useEffect(function(){if(sso&&config.websocketEnabled){setConnection(new WebSocketService(config.websocketIP,config.websocketPort,sso));}},[sso]);function onEvent(event,callback){if(config.websocketEnabled){connection.addSubscriber(event,callback);}}function sendEvent(event,data){if(!config.websocketEnabled){return;}if(!connection){throw new Error('Web Socket connection has not been started');}connection.sendEvent(event,data);}function retry(){if(!config.websocketEnabled){return;}if(connection){connection.retry();return;}if(sso){setConnection(new WebSocketService(config.websocketIP,config.websocketPort,sso));}}function getConnectionStatus(){if(!config.websocketEnabled){return false;}return(connection===null||connection===void 0?void 0:connection.getConnectionStatus())===true;}return/*#__PURE__*/React.createElement(webSocketContext.Provider,{value:{onEvent:onEvent,sendEvent:sendEvent,getConnectionStatus:getConnectionStatus,retry:retry}},children);}","map":{"version":3,"sources":["/Users/chris/Projects/instinct/packages/@instinct-theme/roleplay/src/context/web-socket/WebSocket.provider.tsx"],"names":["webSocketContext","React","useContext","useEffect","useState","WebSocketService","configContext","sessionContext","WebSocketContextProvider","children","sso","config","connection","setConnection","websocketEnabled","websocketIP","websocketPort","onEvent","event","callback","addSubscriber","sendEvent","data","Error","retry","getConnectionStatus"],"mappings":"qJAAA,OAAQA,gBAAR,KAA+B,aAA/B,CACA,MAAOC,CAAAA,KAAP,EAAeC,UAAf,CAA2BC,SAA3B,CAAsCC,QAAtC,KAAqD,OAArD,CACA,OAAQC,gBAAR,KAAoD,2BAApD,CACA,OACEC,aADF,CAGEC,cAHF,KAIO,oBAJP,CAYA,MAAO,SAASC,CAAAA,wBAAT,MAAqE,IAAlCC,CAAAA,QAAkC,MAAlCA,QAAkC,CAC1E,gBAAcP,UAAU,CAACK,cAAD,CAAxB,CAAOG,GAAP,aAAOA,GAAP,CACA,iBAAiBR,UAAU,CAACI,aAAD,CAA3B,CAAOK,MAAP,cAAOA,MAAP,CACA,cAAoCP,QAAQ,EAA5C,wCAAOQ,UAAP,eAAmBC,aAAnB,eAEAV,SAAS,CAAC,UAAM,CACd,GAAIO,GAAG,EAAIC,MAAM,CAACG,gBAAlB,CAAoC,CAClCD,aAAa,CACX,GAAIR,CAAAA,gBAAJ,CAAqBM,MAAM,CAACI,WAA5B,CAAyCJ,MAAM,CAACK,aAAhD,CAA+DN,GAA/D,CADW,CAAb,CAGD,CACF,CANQ,CAMN,CAACA,GAAD,CANM,CAAT,CAQA,QAASO,CAAAA,OAAT,CACEC,KADF,CAEEC,QAFF,CAGE,CACA,GAAIR,MAAM,CAACG,gBAAX,CAA6B,CAC3BF,UAAU,CAAEQ,aAAZ,CAA0BF,KAA1B,CAAiCC,QAAjC,EACD,CACF,CAED,QAASE,CAAAA,SAAT,CACEH,KADF,CAEEI,IAFF,CAGE,CACA,GAAI,CAACX,MAAM,CAACG,gBAAZ,CAA8B,CAC5B,OACD,CACD,GAAI,CAACF,UAAL,CAAiB,CACf,KAAM,IAAIW,CAAAA,KAAJ,CAAU,4CAAV,CAAN,CACD,CACDX,UAAU,CAACS,SAAX,CAAqBH,KAArB,CAA4BI,IAA5B,EACD,CAED,QAASE,CAAAA,KAAT,EAAiB,CACf,GAAI,CAACb,MAAM,CAACG,gBAAZ,CAA8B,CAC5B,OACD,CACD,GAAIF,UAAJ,CAAgB,CACdA,UAAU,CAACY,KAAX,GACA,OACD,CAED,GAAId,GAAJ,CAAS,CACPG,aAAa,CACX,GAAIR,CAAAA,gBAAJ,CAAqBM,MAAM,CAACI,WAA5B,CAAyCJ,MAAM,CAACK,aAAhD,CAA+DN,GAA/D,CADW,CAAb,CAGD,CACF,CAED,QAASe,CAAAA,mBAAT,EAA+B,CAC7B,GAAI,CAACd,MAAM,CAACG,gBAAZ,CAA8B,CAC5B,MAAO,MAAP,CACD,CACD,MAAO,CAAAF,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEa,mBAAZ,MAAsC,IAA7C,CACD,CAED,mBACE,oBAAC,gBAAD,CAAkB,QAAlB,EACE,KAAK,CAAE,CAACR,OAAO,CAAPA,OAAD,CAAUI,SAAS,CAATA,SAAV,CAAqBI,mBAAmB,CAAnBA,mBAArB,CAA0CD,KAAK,CAALA,KAA1C,CADT,EAGGf,QAHH,CADF,CAOD","sourcesContent":["import {webSocketContext} from './WebSocket';\nimport React, {useContext, useEffect, useState} from 'react';\nimport {WebSocketService, WebSocketSubscriber} from '../../services/web-socket';\nimport {\n  configContext,\n  ContextProvidersProps,\n  sessionContext,\n} from '@instinct-web/core';\nimport {\n  WebSocketIncomingEvent,\n  WebSocketIncomingEvents,\n  WebSocketOutgoingEvent,\n  WebSocketOutgoingEvents,\n} from '@instinct-plugin/roleplay-types';\n\nexport function WebSocketContextProvider({children}: ContextProvidersProps) {\n  const {sso} = useContext(sessionContext);\n  const {config} = useContext(configContext);\n  const [connection, setConnection] = useState<WebSocketService>();\n\n  useEffect(() => {\n    if (sso && config.websocketEnabled) {\n      setConnection(\n        new WebSocketService(config.websocketIP, config.websocketPort, sso)\n      );\n    }\n  }, [sso]);\n\n  function onEvent<K extends WebSocketIncomingEvent>(\n    event: K,\n    callback: WebSocketSubscriber<WebSocketIncomingEvents[K]>\n  ) {\n    if (config.websocketEnabled) {\n      connection!.addSubscriber(event, callback);\n    }\n  }\n\n  function sendEvent<K extends WebSocketOutgoingEvent>(\n    event: K,\n    data: WebSocketOutgoingEvents[K]\n  ) {\n    if (!config.websocketEnabled) {\n      return;\n    }\n    if (!connection) {\n      throw new Error('Web Socket connection has not been started');\n    }\n    connection.sendEvent(event, data);\n  }\n\n  function retry() {\n    if (!config.websocketEnabled) {\n      return;\n    }\n    if (connection) {\n      connection.retry();\n      return;\n    }\n\n    if (sso) {\n      setConnection(\n        new WebSocketService(config.websocketIP, config.websocketPort, sso!)\n      );\n    }\n  }\n\n  function getConnectionStatus() {\n    if (!config.websocketEnabled) {\n      return false;\n    }\n    return connection?.getConnectionStatus() === true;\n  }\n\n  return (\n    <webSocketContext.Provider\n      value={{onEvent, sendEvent, getConnectionStatus, retry}}\n    >\n      {children}\n    </webSocketContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}