{"ast":null,"code":"export var defaultWebSocketContext={onEvent:function onEvent(event,callback){},sendEvent:function sendEvent(event,data){},getConnectionStatus:function getConnectionStatus(){return false;},retry:function retry(){}};","map":{"version":3,"sources":["/Users/chris/Projects/instinct/packages/@instinct-theme/roleplay/src/context/web-socket/WebSocket.types.ts"],"names":["defaultWebSocketContext","onEvent","event","callback","sendEvent","data","getConnectionStatus","retry"],"mappings":"AAoBA,MAAO,IAAMA,CAAAA,uBAAyC,CAAG,CACvDC,OADuD,kBAErDC,KAFqD,CAGrDC,QAHqD,CAIrD,CAAE,CAJmD,CAKvDC,SALuD,oBAK7CF,KAL6C,CAK9BG,IAL8B,CAKhB,CAAE,CALc,CAMvDC,mBANuD,+BAMxB,CAC7B,MAAO,MAAP,CACD,CARsD,CASvDC,KATuD,iBAS/C,CAAE,CAT6C,CAAlD","sourcesContent":["import {\n  WebSocketIncomingEvent,\n  WebSocketIncomingEvents,\n  WebSocketOutgoingEvent,\n  WebSocketOutgoingEvents,\n} from '@instinct-plugin/roleplay-types';\n\nexport interface WebSocketContext {\n  onEvent<K extends WebSocketIncomingEvent>(\n    event: K,\n    callback: WebSocketSubscriber<K>\n  ): void;\n  sendEvent<K extends WebSocketOutgoingEvent>(\n    event: K,\n    data: WebSocketOutgoingEvents[K]\n  ): void;\n  getConnectionStatus(): boolean;\n  retry(): void;\n}\n\nexport const defaultWebSocketContext: WebSocketContext = {\n  onEvent<K extends WebSocketIncomingEvent>(\n    event: K,\n    callback: WebSocketSubscriber<K>\n  ) {},\n  sendEvent(event: string, data: object) {},\n  getConnectionStatus(): boolean {\n    return false;\n  },\n  retry() {},\n};\n\nexport type WebSocketSubscriber<K extends WebSocketIncomingEvent> = (\n  payload: WebSocketIncomingEvents[K]\n) => void | Promise<void>;\n"]},"metadata":{},"sourceType":"module"}