{"ast":null,"code":"import WebSocketRetry from 'reconnecting-websocket';\nexport class WebSocketService {\n  constructor(ip, port, sso) {\n    this.sso = sso;\n    this.connection = void 0;\n    this.subscribers = {};\n\n    this.onConnectionStarted = () => {\n      this.sendEvent('auth_with_sso', {\n        sso_ticket: this.sso\n      });\n    };\n\n    this.onConnectionClosed = event => {\n      console.log('WS: Connection Closed ', event);\n    };\n\n    this.onMessage = event => {\n      var _this$subscribers$eve;\n\n      const {\n        event_name,\n        event_data\n      } = JSON.parse(event.data);\n      const subscribers = (_this$subscribers$eve = this.subscribers[event_name]) !== null && _this$subscribers$eve !== void 0 ? _this$subscribers$eve : [];\n      console.log(event_name, event_data);\n\n      for (const subscriber of subscribers) {\n        subscriber(event_data);\n      }\n    };\n\n    this.addSubscriber = (event, callback) => {\n      if (this.subscribers[event]) {\n        this.subscribers[event].push(callback);\n      } else {\n        this.subscribers[event] = [callback];\n      }\n    };\n\n    this.sendEvent = (event, payload) => {\n      this.connection.send(JSON.stringify({\n        event_name: event,\n        event_data: payload\n      }));\n    };\n\n    this.getConnectionStatus = () => {\n      return this.connection.readyState === this.connection.OPEN;\n    };\n\n    this.retry = () => {\n      this.connection.reconnect();\n    };\n\n    this.connection = new WebSocketRetry(`${ip}:${port}`);\n    this.connection.onopen = this.onConnectionStarted;\n    this.connection.onmessage = this.onMessage;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}