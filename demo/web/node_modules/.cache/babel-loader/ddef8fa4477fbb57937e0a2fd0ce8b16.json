{"ast":null,"code":"import{useContext,useEffect}from'react';import{webSocketContext}from'../../context/web-socket';import{configContext,sessionContext}from'@instinct-web/core';export function useWebSocketEventListener(incomingEvent,callback){var _useContext=useContext(configContext),config=_useContext.config;var _useContext2=useContext(sessionContext),online=_useContext2.online;var _useContext3=useContext(webSocketContext),onEvent=_useContext3.onEvent;useEffect(function(){function registerEventListener(){onEvent(incomingEvent,callback);}if(online&&config.websocketEnabled){registerEventListener();}},[online,config.websocketEnabled]);return null;}","map":{"version":3,"sources":["/Users/chris/Projects/instinct/packages/@instinct-theme/roleplay/src/hooks/web-socket/use-event-listener.ts"],"names":["useContext","useEffect","webSocketContext","configContext","sessionContext","useWebSocketEventListener","incomingEvent","callback","config","online","onEvent","registerEventListener","websocketEnabled"],"mappings":"AAAA,OAAQA,UAAR,CAAoBC,SAApB,KAAoC,OAApC,CACA,OAAQC,gBAAR,KAA+B,0BAA/B,CAEA,OAAQC,aAAR,CAAuBC,cAAvB,KAA4C,oBAA5C,CAMA,MAAO,SAASC,CAAAA,yBAAT,CACLC,aADK,CAELC,QAFK,CAGL,CACA,gBAAiBP,UAAU,CAACG,aAAD,CAA3B,CAAOK,MAAP,aAAOA,MAAP,CACA,iBAAiBR,UAAU,CAACI,cAAD,CAA3B,CAAOK,MAAP,cAAOA,MAAP,CACA,iBAAkBT,UAAU,CAACE,gBAAD,CAA5B,CAAOQ,OAAP,cAAOA,OAAP,CAEAT,SAAS,CAAC,UAAM,CACd,QAASU,CAAAA,qBAAT,EAAiC,CAC/BD,OAAO,CAACJ,aAAD,CAAgBC,QAAhB,CAAP,CACD,CAED,GAAIE,MAAM,EAAID,MAAM,CAACI,gBAArB,CAAuC,CACrCD,qBAAqB,GACtB,CACF,CARQ,CAQN,CAACF,MAAD,CAASD,MAAM,CAACI,gBAAhB,CARM,CAAT,CAUA,MAAO,KAAP,CACD","sourcesContent":["import {useContext, useEffect} from 'react';\nimport {webSocketContext} from '../../context/web-socket';\nimport {WebSocketSubscriber} from '../../services/web-socket';\nimport {configContext, sessionContext} from '@instinct-web/core';\nimport {\n  WebSocketIncomingEvent,\n  WebSocketIncomingEvents,\n} from '@instinct-plugin/roleplay-types';\n\nexport function useWebSocketEventListener<K extends WebSocketIncomingEvent>(\n  incomingEvent: K,\n  callback: WebSocketSubscriber<WebSocketIncomingEvents[K]>\n) {\n  const {config} = useContext(configContext);\n  const {online} = useContext(sessionContext);\n  const {onEvent} = useContext(webSocketContext);\n\n  useEffect(() => {\n    function registerEventListener() {\n      onEvent(incomingEvent, callback);\n    }\n\n    if (online && config.websocketEnabled) {\n      registerEventListener();\n    }\n  }, [online, config.websocketEnabled]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}