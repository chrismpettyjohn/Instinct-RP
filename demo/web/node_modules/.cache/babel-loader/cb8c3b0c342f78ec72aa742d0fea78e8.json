{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"value\", \"commands\", \"extraCommands\", \"height\", \"toolbarHeight\", \"enableScroll\", \"visiableDragbar\", \"highlightEnable\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"];\nimport React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands } from './commands';\nimport { reducer, EditorContext } from './Context';\nimport \"./index.css\";\n\nfunction setGroupPopFalse() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _ref = props || {},\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n      className = _ref.className,\n      propsValue = _ref.value,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n      _ref$extraCommands = _ref.extraCommands,\n      extraCommands = _ref$extraCommands === void 0 ? getExtraCommands() : _ref$extraCommands,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 200 : _ref$height,\n      _ref$toolbarHeight = _ref.toolbarHeight,\n      toolbarHeight = _ref$toolbarHeight === void 0 ? 29 : _ref$toolbarHeight,\n      _ref$enableScroll = _ref.enableScroll,\n      enableScroll = _ref$enableScroll === void 0 ? true : _ref$enableScroll,\n      _ref$visiableDragbar = _ref.visiableDragbar,\n      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n      _ref$highlightEnable = _ref.highlightEnable,\n      highlightEnable = _ref$highlightEnable === void 0 ? true : _ref$highlightEnable,\n      _ref$preview = _ref.preview,\n      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n      _ref$fullscreen = _ref.fullscreen,\n      fullscreen = _ref$fullscreen === void 0 ? false : _ref$fullscreen,\n      _ref$previewOptions = _ref.previewOptions,\n      previewOptions = _ref$previewOptions === void 0 ? {} : _ref$previewOptions,\n      textareaProps = _ref.textareaProps,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n      autoFocus = _ref.autoFocus,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      onChange = _ref.onChange,\n      hideToolbar = _ref.hideToolbar,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var _useReducer = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    height: height,\n    highlightEnable: highlightEnable,\n    tabSize: tabSize,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: commands,\n    extraCommands: extraCommands,\n    fullscreen: fullscreen,\n    onChange: onChange,\n    barPopup: {}\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var container = useRef(null);\n  var previewRef = useRef(null);\n  var enableScrollRef = useRef(enableScroll);\n  useImperativeHandle(ref, function () {\n    return _objectSpread({}, state);\n  });\n  useMemo(function () {\n    return enableScrollRef.current = enableScroll;\n  }, [enableScroll]);\n  useEffect(function () {\n    var stateInit = {};\n\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n\n    if (dispatch) {\n      dispatch(_objectSpread(_objectSpread({}, state), stateInit));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var cls = [className, prefixCls, state.preview ? \"\".concat(prefixCls, \"-show-\").concat(state.preview) : null, state.fullscreen ? \"\".concat(prefixCls, \"-fullscreen\") : null].filter(Boolean).join(' ').trim();\n  useMemo(function () {\n    return propsValue !== state.markdown && dispatch({\n      markdown: propsValue || ''\n    });\n  }, [propsValue]);\n  useMemo(function () {\n    return previewType !== state.preview && dispatch({\n      preview: previewType\n    });\n  }, [previewType]);\n  useMemo(function () {\n    return height !== state.height && dispatch({\n      height: height\n    });\n  }, [height]);\n  useMemo(function () {\n    return tabSize !== state.tabSize && dispatch({\n      tabSize: tabSize\n    });\n  }, [tabSize]);\n  useMemo(function () {\n    return highlightEnable !== state.highlightEnable && dispatch({\n      highlightEnable: highlightEnable\n    });\n  }, [highlightEnable]);\n  useMemo(function () {\n    return autoFocus !== state.autoFocus && dispatch({\n      autoFocus: autoFocus\n    });\n  }, [autoFocus]);\n  useMemo(function () {\n    return fullscreen !== state.fullscreen && dispatch({\n      fullscreen: fullscreen\n    });\n  }, [fullscreen]);\n  var textareaDomRef = useRef();\n  var active = useRef();\n  useMemo(function () {\n    textareaDomRef.current = state.textareaWarp;\n\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', function () {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', function () {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  var handleScroll = function handleScroll(e) {\n    if (!enableScrollRef.current) return;\n    var textareaDom = textareaDomRef.current;\n    var previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n\n      var scrollTop = 0;\n\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n\n      dispatch({\n        scrollTop: scrollTop\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: _objectSpread(_objectSpread({}, state), {}, {\n      dispatch: dispatch\n    })\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: container,\n    className: cls,\n    onClick: function onClick() {\n      dispatch({\n        barPopup: _objectSpread({}, setGroupPopFalse(state.barPopup))\n      });\n    },\n    style: {\n      height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height\n    }\n  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n    prefixCls: prefixCls,\n    height: toolbarHeight\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\"),\n    style: {\n      height: state.fullscreen ? \"calc(100% - \".concat(toolbarHeight, \"px)\") : Number(state.height) - toolbarHeight\n    }\n  }, /(edit|live)/.test(state.preview || '') && /*#__PURE__*/React.createElement(TextArea, _extends({\n    className: \"\".concat(prefixCls, \"-input\"),\n    prefixCls: prefixCls,\n    autoFocus: autoFocus\n  }, textareaProps, {\n    onScroll: handleScroll\n  })), /(live|preview)/.test(state.preview || '') && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, previewOptions, {\n    onScroll: handleScroll,\n    ref: previewRef,\n    source: state.markdown || '',\n    className: \"\".concat(prefixCls, \"-preview\")\n  }))), visiableDragbar && !state.fullscreen && /*#__PURE__*/React.createElement(DragBar, {\n    prefixCls: prefixCls,\n    height: state.height,\n    maxHeight: maxHeight,\n    minHeight: minHeight,\n    onChange: function onChange(newHeight) {\n      dispatch({\n        height: newHeight\n      });\n    }\n  })));\n};\n\nvar mdEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nmdEditor.Markdown = MarkdownPreview;\nexport default mdEditor;","map":{"version":3,"sources":["../../src/Editor.tsx"],"names":["data","Object","InternalMDEditor","prefixCls","className","propsValue","commands","getCommands","extraCommands","getExtraCommands","height","toolbarHeight","enableScroll","visiableDragbar","highlightEnable","previewType","fullscreen","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","onChange","hideToolbar","other","props","state","dispatch","useReducer","markdown","preview","scrollTop","scrollTopPreview","barPopup","container","useRef","previewRef","enableScrollRef","useImperativeHandle","useMemo","useEffect","stateInit","cls","textareaDomRef","active","handleScroll","textareaDom","previewDom","scale","e","setGroupPopFalse","Number","newHeight","mdEditor","React"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: number;\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    extraCommands = getExtraCommands(),\n    height = 200,\n    toolbarHeight = 29,\n    enableScroll = true,\n    visiableDragbar = true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    onChange,\n    hideToolbar,\n    ...other\n  } = props || {};\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    height,\n    highlightEnable,\n    tabSize,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands,\n    extraCommands,\n    fullscreen,\n    onChange,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<MarkdownPreviewRef>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(() => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }), [propsValue]);\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(() => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }), [highlightEnable]);\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(() => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }), [fullscreen]);\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>();\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div\n        ref={container}\n        className={cls}\n        onClick={() => {\n          dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n        }}\n        style={{\n          height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height,\n        }}\n        {...other}\n      >\n        {!hideToolbar && <Toolbar prefixCls={prefixCls} height={toolbarHeight} />}\n        <div\n          className={`${prefixCls}-content`}\n          style={{\n            height: state.fullscreen ? `calc(100% - ${toolbarHeight}px)` : Number(state.height) - toolbarHeight,\n          }}\n        >\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onScroll={handleScroll}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && (\n            <MarkdownPreview\n              {...(previewOptions as unknown)}\n              onScroll={handleScroll}\n              ref={previewRef}\n              source={state.markdown || ''}\n              className={`${prefixCls}-preview`}\n            />\n          )}\n        </div>\n        {visiableDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              dispatch({ height: newHeight });\n            }}\n          />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\nconst mdEditor = React.forwardRef<ContextStore, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof mdEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(mdEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default mdEditor as MDEditor;\n"]},"metadata":{},"sourceType":"module"}