{"ast":null,"code":"import _objectSpread from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{rpUserContext}from'./RPUser';import{rpSessionService}from'../../services/session';import React,{useContext,useEffect,useState}from'react';import{sessionContext}from'@instinct-web/core';export function RPUserContextProvider(_ref){var children=_ref.children;var _useContext=useContext(sessionContext),user=_useContext.user;var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),rpUser=_useState2[0],setRPUser=_useState2[1];useEffect(function(){if((user===null||user===void 0?void 0:user.id)===undefined){setRPUser(undefined);return;}function fetchLatestRPUser(){return _fetchLatestRPUser.apply(this,arguments);}function _fetchLatestRPUser(){_fetchLatestRPUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return rpSessionService.getRPUser();case 2:response=_context.sent;setRPUser(response);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchLatestRPUser.apply(this,arguments);}fetchLatestRPUser();},[user===null||user===void 0?void 0:user.id]);function updateRPUser(changes){setRPUser(function(_){if(!changes)return undefined;return _objectSpread(_objectSpread({},_),changes);});}return/*#__PURE__*/React.createElement(rpUserContext.Provider,{value:{rpUser:rpUser,setRPUser:updateRPUser}},children);}","map":{"version":3,"sources":["/Users/chris/Projects/instinct/packages/@instinct-theme/roleplay/src/context/rp-user/RPUser.provider.tsx"],"names":["rpUserContext","rpSessionService","React","useContext","useEffect","useState","sessionContext","RPUserContextProvider","children","user","undefined","rpUser","setRPUser","id","fetchLatestRPUser","getRPUser","response","updateRPUser","changes","_"],"mappings":"glBAAA,OAAQA,aAAR,KAA4B,UAA5B,CAEA,OAAQC,gBAAR,KAA+B,wBAA/B,CACA,MAAOC,CAAAA,KAAP,EAAeC,UAAf,CAA2BC,SAA3B,CAAsCC,QAAtC,KAAqD,OAArD,CACA,OAA+BC,cAA/B,KAAoD,oBAApD,CAEA,MAAO,SAASC,CAAAA,qBAAT,MAAkE,IAAlCC,CAAAA,QAAkC,MAAlCA,QAAkC,CACvE,gBAAeL,UAAU,CAACG,cAAD,CAAzB,CAAOG,IAAP,aAAOA,IAAP,CACA,cAA4BJ,QAAQ,CAAqBK,SAArB,CAApC,wCAAOC,MAAP,eAAeC,SAAf,eAEAR,SAAS,CAAC,UAAM,CACd,GAAI,CAAAK,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEI,EAAN,IAAaH,SAAjB,CAA4B,CAC1BE,SAAS,CAACF,SAAD,CAAT,CACA,OACD,CAJa,QAMCI,CAAAA,iBAND,6JAMd,sKACyBb,CAAAA,gBAAgB,CAACc,SAAjB,EADzB,QACQC,QADR,eAEEJ,SAAS,CAACI,QAAD,CAAT,CAFF,sDANc,oDAWdF,iBAAiB,GAClB,CAZQ,CAYN,CAACL,IAAD,SAACA,IAAD,iBAACA,IAAI,CAAEI,EAAP,CAZM,CAAT,CAcA,QAASI,CAAAA,YAAT,CAAsBC,OAAtB,CAAuD,CACrDN,SAAS,CAAC,SAAAO,CAAC,CAAI,CACb,GAAI,CAACD,OAAL,CAAc,MAAOR,CAAAA,SAAP,CACd,sCACKS,CADL,EAEKD,OAFL,EAID,CANQ,CAAT,CAOD,CAED,mBACE,oBAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAE,CAACP,MAAM,CAAEA,MAAT,CAAiBC,SAAS,CAAEK,YAA5B,CAA/B,EACGT,QADH,CADF,CAKD","sourcesContent":["import {rpUserContext} from './RPUser';\nimport {RPUser} from '@instinct-plugin/roleplay-types';\nimport {rpSessionService} from '../../services/session';\nimport React, {useContext, useEffect, useState} from 'react';\nimport {ContextProvidersProps, sessionContext} from '@instinct-web/core';\n\nexport function RPUserContextProvider({children}: ContextProvidersProps) {\n  const {user} = useContext(sessionContext);\n  const [rpUser, setRPUser] = useState<RPUser | undefined>(undefined);\n\n  useEffect(() => {\n    if (user?.id === undefined) {\n      setRPUser(undefined);\n      return;\n    }\n\n    async function fetchLatestRPUser() {\n      const response = await rpSessionService.getRPUser();\n      setRPUser(response);\n    }\n\n    fetchLatestRPUser();\n  }, [user?.id]);\n\n  function updateRPUser(changes?: Partial<RPUser>): void {\n    setRPUser(_ => {\n      if (!changes) return undefined;\n      return {\n        ..._,\n        ...changes,\n      } as any;\n    });\n  }\n\n  return (\n    <rpUserContext.Provider value={{rpUser: rpUser, setRPUser: updateRPUser}}>\n      {children}\n    </rpUserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}