{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/chris/Projects/instinct/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';export function createOptionalFetchHook(promise,dependencies){var refresh=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var _useState=useState(),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];useEffect(function(){setState(undefined);function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return promise();case 2:data=_context.sent;setState(data);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}if(dependencies){fetchData();}},[dependencies,refresh]);return state;}","map":{"version":3,"sources":["/Users/chris/Projects/instinct/packages/@instinct-web/core/src/hooks/optional-fetch-hook.base.ts"],"names":["useEffect","useState","createOptionalFetchHook","promise","dependencies","refresh","state","setState","undefined","fetchData","data"],"mappings":"4bAAA,OAAQA,SAAR,CAAmBC,QAAnB,KAAkC,OAAlC,CAEA,MAAO,SAASC,CAAAA,uBAAT,CACLC,OADK,CAELC,YAFK,CAIiB,IADtBC,CAAAA,OACsB,2DADK,CACL,CACtB,cAA0BJ,QAAQ,EAAlC,wCAAOK,KAAP,eAAcC,QAAd,eAEAP,SAAS,CAAC,UAAM,CACdO,QAAQ,CAACC,SAAD,CAAR,CADc,QAECC,CAAAA,SAFD,qIAEd,kKACqBN,CAAAA,OAAO,EAD5B,QACQO,IADR,eAEEH,QAAQ,CAACG,IAAD,CAAR,CAFF,sDAFc,4CAOd,GAAIN,YAAJ,CAAkB,CAChBK,SAAS,GACV,CACF,CAVQ,CAUN,CAACL,YAAD,CAAeC,OAAf,CAVM,CAAT,CAYA,MAAOC,CAAAA,KAAP,CACD","sourcesContent":["import {useEffect, useState} from 'react';\n\nexport function createOptionalFetchHook<Dependencies, Response>(\n  promise: (...args: Array<Dependencies>) => Promise<Response>,\n  dependencies?: Dependencies,\n  refresh: number | string = 0\n): Response | undefined {\n  const [state, setState] = useState<Response>();\n\n  useEffect(() => {\n    setState(undefined);\n    async function fetchData() {\n      const data = await promise();\n      setState(data);\n    }\n\n    if (dependencies) {\n      fetchData();\n    }\n  }, [dependencies, refresh]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}